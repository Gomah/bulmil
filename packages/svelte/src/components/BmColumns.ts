/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@bulmil/core';


interface BmColumnsProps {
  
  /** Centered */
  isCentered?: Components.BmColumns["isCentered"]
  
  /** Mobile */
  isMobile?: Components.BmColumns["isMobile"]
  
  /** Desktop */
  isDesktop?: Components.BmColumns["isDesktop"]
  
  /** Multiline */
  isMultiline?: Components.BmColumns["isMultiline"]
  
  /** Gapless */
  isGapless?: Components.BmColumns["isGapless"]
  
  /** Vertically centered */
  isVcentered?: Components.BmColumns["isVcentered"]
  
  /** Columns gaps */
  gaps?: Components.BmColumns["gaps"]
}

interface BmColumnsEvents {
  
}

interface BmColumnsSlots {
  default: any
}
  
/* generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let bm_columns;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			bm_columns = element("bm-columns");
			if (default_slot) default_slot.c();
			set_custom_element_data(bm_columns, "is-centered", /*isCentered*/ ctx[0]);
			set_custom_element_data(bm_columns, "is-mobile", /*isMobile*/ ctx[1]);
			set_custom_element_data(bm_columns, "is-desktop", /*isDesktop*/ ctx[2]);
			set_custom_element_data(bm_columns, "is-multiline", /*isMultiline*/ ctx[3]);
			set_custom_element_data(bm_columns, "is-gapless", /*isGapless*/ ctx[4]);
			set_custom_element_data(bm_columns, "is-vcentered", /*isVcentered*/ ctx[5]);
			set_custom_element_data(bm_columns, "gaps", /*gaps*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, bm_columns, anchor);

			if (default_slot) {
				default_slot.m(bm_columns, null);
			}

			/*bm_columns_binding*/ ctx[11](bm_columns);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*isCentered*/ 1) {
				set_custom_element_data(bm_columns, "is-centered", /*isCentered*/ ctx[0]);
			}

			if (!current || dirty & /*isMobile*/ 2) {
				set_custom_element_data(bm_columns, "is-mobile", /*isMobile*/ ctx[1]);
			}

			if (!current || dirty & /*isDesktop*/ 4) {
				set_custom_element_data(bm_columns, "is-desktop", /*isDesktop*/ ctx[2]);
			}

			if (!current || dirty & /*isMultiline*/ 8) {
				set_custom_element_data(bm_columns, "is-multiline", /*isMultiline*/ ctx[3]);
			}

			if (!current || dirty & /*isGapless*/ 16) {
				set_custom_element_data(bm_columns, "is-gapless", /*isGapless*/ ctx[4]);
			}

			if (!current || dirty & /*isVcentered*/ 32) {
				set_custom_element_data(bm_columns, "is-vcentered", /*isVcentered*/ ctx[5]);
			}

			if (!current || dirty & /*gaps*/ 64) {
				set_custom_element_data(bm_columns, "gaps", /*gaps*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(bm_columns);
			if (default_slot) default_slot.d(detaching);
			/*bm_columns_binding*/ ctx[11](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { isCentered = undefined } = $$props;
	let { isMobile = undefined } = $$props;
	let { isDesktop = undefined } = $$props;
	let { isMultiline = undefined } = $$props;
	let { isGapless = undefined } = $$props;
	let { isVcentered = undefined } = $$props;
	let { gaps = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(7, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function bm_columns_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(7, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('isCentered' in $$props) $$invalidate(0, isCentered = $$props.isCentered);
		if ('isMobile' in $$props) $$invalidate(1, isMobile = $$props.isMobile);
		if ('isDesktop' in $$props) $$invalidate(2, isDesktop = $$props.isDesktop);
		if ('isMultiline' in $$props) $$invalidate(3, isMultiline = $$props.isMultiline);
		if ('isGapless' in $$props) $$invalidate(4, isGapless = $$props.isGapless);
		if ('isVcentered' in $$props) $$invalidate(5, isVcentered = $$props.isVcentered);
		if ('gaps' in $$props) $$invalidate(6, gaps = $$props.gaps);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		isCentered,
		isMobile,
		isDesktop,
		isMultiline,
		isGapless,
		isVcentered,
		gaps,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		bm_columns_binding
	];
}

class BmColumns extends SvelteComponent {
  $$prop_def: BmColumnsProps;
  $$events_def: BmColumnsEvents;
  $$slot_def: BmColumnsSlots;

  $on<K extends keyof BmColumnsEvents>(type: K, callback: (e: BmColumnsEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<BmColumnsProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			isCentered: 0,
			isMobile: 1,
			isDesktop: 2,
			isMultiline: 3,
			isGapless: 4,
			isVcentered: 5,
			gaps: 6,
			getWebComponent: 8
		});
	}

	get isCentered() {
		return this.$$.ctx[0];
	}

	set isCentered(isCentered) {
		this.$$set({ isCentered });
		flush();
	}

	get isMobile() {
		return this.$$.ctx[1];
	}

	set isMobile(isMobile) {
		this.$$set({ isMobile });
		flush();
	}

	get isDesktop() {
		return this.$$.ctx[2];
	}

	set isDesktop(isDesktop) {
		this.$$set({ isDesktop });
		flush();
	}

	get isMultiline() {
		return this.$$.ctx[3];
	}

	set isMultiline(isMultiline) {
		this.$$set({ isMultiline });
		flush();
	}

	get isGapless() {
		return this.$$.ctx[4];
	}

	set isGapless(isGapless) {
		this.$$set({ isGapless });
		flush();
	}

	get isVcentered() {
		return this.$$.ctx[5];
	}

	set isVcentered(isVcentered) {
		this.$$set({ isVcentered });
		flush();
	}

	get gaps() {
		return this.$$.ctx[6];
	}

	set gaps(gaps) {
		this.$$set({ gaps });
		flush();
	}

	get getWebComponent(): HTMLBmColumnsElement | undefined {
		return this.$$.ctx[8];
	}
}

export default BmColumns;